import json
import notional

with open("NotionAuthKey", 'r') as f:
	Auth = f.read()

Table_ID = "1fc39ac4-de21-4331-9e16-7468b9ac1bfa"

# from notional import blocks, types
notion = notional.connect(auth=Auth)

def getText(cell):
	return "".join([x.plain_text for x in cell]).replace("\u2192", "->")
assemblerDefs = """ # Auto generated by NotionInterface
GhostDefsVersion = "V1.2"
Comment = 		';'
Address =		'$'
Label =		 	':'
Data =		 	'.'
Registers = 	['R0', 'R1', 'R2', 'R3']

TypeLengths = {"Value":1, "Address":1, "Instruction":1, "RR":0} # Length in bytes of each type used below

"""
def main():
	global assemblerDefs
	instructionSet, Instruction, Shorthand = "", "", {}
	shorthands, instructions = [], [] # Used for sublime syntax

	global symbol
	TABLE = notion.blocks.retrieve(Table_ID)
	tableChildren = notion.blocks.children.list(TABLE)
	for row in tableChildren:
		cells = row.table_row.cells
		InstructionBinary = getText(cells[0])

		if not (all([(char in ["0", "1", "R"]) for char in InstructionBinary]) and InstructionBinary != ""):
			continue

		if getText(cells[3]) != "":
			instructions.append(getText(cells[3]))
		print(InstructionBinary)
		if "RR" in InstructionBinary:
			InstructionBinaryDec = str(int(InstructionBinary.replace("RR", "00"),2)) + "RR"
		else:
			InstructionBinaryDec = str(int(InstructionBinary,2))
		instructionSet += f'	"{InstructionBinaryDec}": "{getText(cells[3])}",\n' # Change 3 to 2 for the description
		Instruction += f'	"' + str(getText(cells[3])) + '": {\n		"Bin": "' + str(InstructionBinary) +'",\n		"Arguments": "' + str(getText(cells[4])).split(";")[1].strip() + '",\n	},\n'

		ShorthandInstruction = str(getText(cells[4])).split(";")[0].strip()
		if ShorthandInstruction != "":
			shorthands.append(ShorthandInstruction)
			Shorthand[ShorthandInstruction] = Shorthand.get(ShorthandInstruction, {})
			Shorthand[ShorthandInstruction][str(getText(cells[4])).split(";")[1].strip()] = str(getText(cells[3]))

	with open('../simulator/instructionSet.py', 'w+') as f:
		f.write("instructionSet = {\n" + instructionSet + "}")
	with open('../assembler/assemblerDefs.py', 'w+') as f:
		assemblerDefs += "Instructions = {\n"
		assemblerDefs += Instruction
		assemblerDefs += "}\nShorthand = "
		assemblerDefs += json.dumps(Shorthand, indent=4)
		f.write(assemblerDefs)


	genSyntaxPath = "GHASM.sublime-syntax.template"
	with open(genSyntaxPath, 'r') as f:
		genSyntaxData = f.read()

	genSyntaxData = genSyntaxData.replace(r"%INSTRUCTIONS%", '|'.join(instructions))
	genSyntaxData = genSyntaxData.replace(r"%SHORTHAND%", '|'.join(shorthands))

	with open(genSyntaxPath.replace('.template', ''), 'w+') as f:
		f.write(genSyntaxData)
	print("Done!")

if __name__ == '__main__':
	main()