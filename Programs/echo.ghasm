#INC ./interrupts/kernel.ghasm
#ORG PROG_START

ST 0b0000000000000001 $0xaf80	;; Background
ST 0b0000011111001000 $0xaf81	;; Forground

ST KeyboardInterrupt $0xaf00	;; Register Keyboard Interrupt
ST 3 $0xaffe					;; Display mode

ST printString $0xaf5e			;; Register printString as the string printing interrupt
ST printChar $0xaf5f			;; Register printChar as the character printing interrupt

;ST buffer $0xaf70
;ST 0 $0xaf71					;; Set the X position to 1
;ST 0 $0xaf72					;; Set the Y position to 1
;ST Font $0xaf73					;; Set the font to the font address
;INT 0x5e

;; Char Print Routine (5f)
; 0xaf70: Character
; 0xaf71: X Pos
; 0xaf72: Y Pos
; 0xaf73: Font Address

here:
	JMP here
HLT

KeyboardInterrupt:
POP R0						; Get key state
CEZ R0						; 
JMPC KeyboardInterruptExit	; Return if key up event
LD R0 $TextInputCursor		; Load the cursor within the textinput memory
INC R0						; Increment it
CGT R0 8					; If it's greater than 8
JMPC KeyboardInterruptExit	; - don't want to overflow
ST R0 $TextInputCursor		; Store it
DEC R0						; Restore it to its correct value
ADD R0 TextInput			; Add the address of the textinput memory
DD R0						; The address of the next character
POP R0 						; Load the new character
STD R0						; Store it to the textinput memory
ST R0 $0xaf70				; Store it to the character to be drawn
LD R0 $Cursor				; /
AND R0 0x00ff				; |
ST R0 $0xaf71				; The lower 8 bits of the cursor to the Xpos
LD R0 $Cursor				; /
SHR R0 8					; |
ST R0 $0xaf72				; The upper 8 become the Ypos
ST Font $0xaf73				; Set the font to the font address
INT 0x5f					; Draw the character
LD R0 $Cursor				; /
INC R0 						; |
ST R0 $Cursor				; Increment the cursor
POP
RET

KeyboardInterruptExit:
	POP R0
	POP
	RET

TextInput: .ds "        " ; 8
TextInputCursor: .db 0

Cursor: .db 0x0000 ; (ypos, xpos)

printString:
#INC ./interrupts/stringPrint.ghasm
printChar:
#INC ./interrupts/charPrint.ghasm
Font:
#INC ./fontGen/font.hex