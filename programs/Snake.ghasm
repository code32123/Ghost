; TODO: Explain myself better
; TODO: Limit the snake pos stack growth (with modulo?) without losing the lookback
; Sometimes the apple is able to generate on the tail, which is acceptable except it's immedietly erased. Or something else is happening, but the apple has a chance to become invisible


#DEF KeyAddr 0x9f00
#DEF Random 0x9fff

CALL GenApple
GameLoop:
	CALL FrameDelay ; Calls keyboard reader a LOT
	CALL SnakeMove
	CALL SnakeRender
	JMP GameLoop
GameLoopExit:
HLT


FrameDelay:
	PSH
	LD R0 0x0000
	FrameDelay_Loop:
		CALL KeypressInputs
		INC R0
		CL R0 0x1000
		JMPC FrameDelay_Loop
	POP
	RET

GenApple:
	PSH
	LD R0 $Random ; between 0 and 0xffff
	CALL splitByte

	; Shrink to less than 8 0b0000 0000 1010 1010
	SHR R0 0x0004
	SHR R1 0x0004
	PSH R1
	PSH R0
	CALL combineByte
	ST R0 $ApplePosition

	; Check if it's in the snake already

	; R0 Position to check
	; Ret R1=1 if collided, else R1=0
	CALL CheckSnakeBodyCollisions
	CNZ R1
	JMPC GenAppleFail

	; Draw the new apple
	POP R0
	POP R1
	LD R2 FilledSprite
	LD R3 $AppleColor
	CALL SpriteRender

	POP
	RET

	GenAppleFail:
		POP R0
		POP R1
		JMP GenApple


SnakeMove:
	PSH
	MV $SnakeDirection $SnakeDirectionAcknowledge

	LD R0 $SnakeBodyStart
	INC R0
	ST R0 $SnakeBodyStart
	LD R0 $SnakeBodyStop
	INC R0
	ST R0 $SnakeBodyStop

	DD R0
	LD R1 ; Final point in snake
	ADD R1 $SnakeDirection ; Transforms point
	INC R0
	DD R0
	ST R1 ; Save transformed point to next stack address

	; R1 now has the head position
	; Checking Collisions
	CE R1 $ApplePosition
	CALLC EatApple
	PSH R1
	POP R0 ; Move R1 to R0
	CALL CheckEdges
	CALL CheckSelfCollisions

	POP
	RET

; R0 Position to check
; Ret R1=1 if collided, else R1=0
CheckSnakeBodyCollisions:
	PSH
	ST R0 $CheckSnakeBodyPoint
	; To get the address of the first body part in the stack, we need SnakeBodyStack + $SnakeBodyOffset
	LD R1 $SnakeBodyStart
	; R1 now has the address of the snake tail

	CheckSnakeBodyCollisionsLoop:
		DD R1
		LD R2 ; R2 now has the body position
		CE R2 $CheckSnakeBodyPoint
		JMPC CheckSnakeBodyCollisionsFound

		INC R1
		CL R1 $SnakeBodyStop
		JMPC CheckSnakeBodyCollisionsLoop


	POP
	LD R1 0
	RET

	CheckSnakeBodyCollisionsFound:
	POP
	LD R1 1
	RET

; R0 is the snakes position
CheckSelfCollisions:
	PSH
	CALL CheckSnakeBodyCollisions
	CNZ R1
	JMPC CheckSelfCollisionsFail
	POP
	RET
	CheckSelfCollisionsFail:
	HLT


;R0 is the snakes position
CheckEdges:
	PSH
	
	CALL splitByte


	CE R0 0x00ff
	JMPC CheckEdgesFail
	CE R1 0x00ff
	JMPC CheckEdgesFail

	CE R0 0x0010
	JMPC CheckEdgesFail
	CE R1 0x0010
	JMPC CheckEdgesFail

	POP
	RET

	CheckEdgesFail:
		HLT ; Too much work to clean up the stack :(


EatApple:
	PSH
	; Lengthen snake by decrementing the start, then spawn a new apple
	LD R0 $SnakeBodyStart
	DEC R0
	ST R0 $SnakeBodyStart

	CALL GenApple
	POP
	RET

KeypressInputs:
	PSH
	CNZ $KeyAddr+0
	CALLC MoveUp
	CNZ $KeyAddr+1
	CALLC MoveDown
	CNZ $KeyAddr+2
	CALLC MoveLeft
	CNZ $KeyAddr+3
	CALLC MoveRight
	POP
	RET
	; 0xffff^ 0x0001_ 0xff00< 0x0100> 
	MoveUp:
		LD R0 $SnakeDirectionAcknowledge
		CE R0 0x0001
		RETC ; Return if current direction is down
		ST 0xffff $SnakeDirection
		RET
	MoveDown:
		LD R0 $SnakeDirectionAcknowledge
		CE R0 0xffff
		RETC ; Return if current direction is up
		ST 0x0001 $SnakeDirection
		RET
	MoveLeft:
		LD R0 $SnakeDirectionAcknowledge
		CE R0 0x0100
		RETC ; Return if current direction is right
		ST 0xff00 $SnakeDirection
		RET
	MoveRight:
		LD R0 $SnakeDirectionAcknowledge
		CE R0 0xff00
		RETC ; Return if current direction is left
		ST 0x0100 $SnakeDirection
		RET

SnakeRender:
	PSH
	; Clean up tail
	LD R0 $SnakeBodyStart
	DEC R0
	DD R0
	LD R0
	CALL splitByte
	LD R2 FilledSprite
	LD R3 0x0000
	CALL SpriteRender

	; Draw over the head with the body
	LD R0 $SnakeBodyStop
	PSH R0
	DD R0
	LD R0
	CALL splitByte
	LD R2 FilledSprite
	LD R3 $SnakeColor
	CALL SpriteRender

	; Draw the head at the front
	POP R0
	INC R0
	DD R0
	LD R0
	CALL splitByte
	LD R2 EmptySprite
	LD R3 $SnakeColor
	CALL SpriteRender
	POP
	RET


; 0/1 is SpritePosX/Y, 2 is the address of the sprite, 3 is the color of the sprite
; Desroys addresses SpriteRenderPositionX/Y
SpriteRender:
	PSH
	SHL R0 0x0003
	SHL R1 0x0003
	ST R0 $SpriteRenderPositionX
	ST R1 $SpriteRenderPositionY
	ST R2 $SpriteRenderAddress
	LD R2 0x0000 ; LoopY progress
	SpriteRenderLoopY:
		CE R2 0x0008
		JMPC SpriteRenderLoopEndY
		LD R1 0x0000 ; LoopX progress
		SpriteRenderLoopX:
			LD R0 $SpriteRenderPositionY
			ADD R2 ; R0 + R2
			SHL R0 0x0007 ; Equivalent to multiplying by 128
			ADD R0 0xa000
			ADD R0 $SpriteRenderPositionX
			ADD R1 ; defaults to R0 + R1

			PSH
			LD R0 $SpriteRenderAddress
			ADD R2
			; R0 is now the address of the sprite + LoopY progress
			DD R0
			LD R0
			; R0 is now correct row of the sprite
			; 1 is LoopX progress
			CALL getOneBit
			DD SpriteRenderDontDraw
			CZ R0
			JMPC

			SpriteRenderDraw:
			POP
			DD R0
			ST R3
			JMP SpriteRenderDrawEnd
			SpriteRenderDontDraw:
			POP
			SpriteRenderDrawEnd:
			INC R1
			DD SpriteRenderLoopEndX
			CE R1 0x0008
			JMPC
			JMP SpriteRenderLoopX
		SpriteRenderLoopEndX:
		INC R2
		JMP SpriteRenderLoopY
	SpriteRenderLoopEndY:
	POP
	RET

; R0 is the value to scan, R1 is the bit to scan
; Returned is R0 with either 1 or 0
; R0: 0b0000000100000000 will only return 1 if R1 is 7, the indice of the 1 value
getOneBit:
	SHL0 R1
	SHR R0 0x000f
	RET

; IN:  R0: 0xabcd
; OUT: R0: 0x00ab, R1: 0x00cd
splitByte:
	PSH R0
	SHR R0 0x0008
	POP R1
	SHL R1 0x0008
	SHR R1 0x0008
	RET

; IN:  R0: 0x00ab, R1: 0x00cd
; OUT: R0: 0xabcd
combineByte:
	SHL R0 0x0008
	ADD R1
	RET

CheckSnakeBodyPoint: .dd 0
; 0xffff^ 0x0001_ 0xff00< 0x0100> 
; So that it stores the transformation, basically
SnakeDirection: .dh 0x0100
SnakeDirectionAcknowledge: .dh 0x0100 ; updated on move to prevent a user quickly double-turning between screen updates

SpriteRenderPositionX: .dd 0
SpriteRenderPositionY: .dd 0
SpriteRenderAddress: .dd 0
; Sprites/Colors
SnakeColor:
.db 0b00000 111111 00000
AppleColor:
.db 0b11111 000000 00000
FilledSprite:
.db 0b0111 1100 0000 0000
.db 0b1111 1110 0000 0000
.db 0b1111 1110 0000 0000
.db 0b1111 1110 0000 0000
.db 0b1111 1110 0000 0000
.db 0b1111 1110 0000 0000
.db 0b0111 1100 0000 0000
.db 0b0000 0000 0000 0000
EmptySprite:
.db 0b0111 1100 0000 0000
.db 0b1000 0010 0000 0000
.db 0b1000 0010 0000 0000
.db 0b1000 0010 0000 0000
.db 0b1000 0010 0000 0000
.db 0b1000 0010 0000 0000
.db 0b0111 1100 0000 0000
.db 0b0000 0000 0000 0000

ApplePosition:
.dh 0x0000

SnakeBodyStart: .dh SnakeBodyStack
SnakeBodyStop:  .dh SnakeBodyStack+2
SnakeBodyStack: ; 0xXXYY
.dh 0x0104
.dh 0x0204
.dh 0x0304
.dh 0x0404

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000

.dh 0x0000
.dh 0x0000
.dh 0x0000
.dh 0x0000
